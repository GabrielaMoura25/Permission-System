Node.js and React Application Development Requirements
Project Overview
    • Backend: Node.js with Express.js or Fastify
    • Frontend: React
    • Language: TypeScript
Backend Requirements
    • Create API endpoint to get user info. - OK!
    • Create API endpoint to edit user info.
    • Add simple API auth mechanism (Basic HTTP Authentication, API Keys etc) to validate if requests come from authorized application. -OK!
    • Add middleware to validate request body in user edit endpoint. - OK!

Response Format: - OK!
{
  "user": {
    "firstname": "John",
    "email": "john@mailforspam.com"
  },
  "permissions": [
    "user:profile:view",
    "user:profile:firstname:view",
    "user:profile:email:view",
    "user:profile:firstname:edit",
    "user:profile:email:edit"
  ]
}
    • User Storage: Implement user storage using a database (e.g., PostgreSQL, MongoDB, Redis). - OK!
Frontend Requirements
    • Application global state in order to store some data which is accessible from any component. - OK!
    • Custom Form Elements: Create custom <input /> elements with custom validations, like length restrictions and etc together with validation hints in case if form is invalid or request fails. - OK! 
    • Business Layer: Build forms based on user permissions.
    • Permissions-Based Features:
    • "user:profile:view": User can view the profile form in a readonly state.
    • "user:profile:edit": User can edit the profile form.
    • "[user:profile:view, user:profile:name:edit]": User can view the profile form and edit only the name field.
    • All fields are hidden by default and only shown based on user permissions.
Testing and Best Practices
    • Unit Testing: Cover core business logic with unit tests.
General Requirements
    • Documentation: Ensure clear documentation for setup, configuration, and usage.
    • Code Quality: Follow best practices for TypeScript and both Node.js and React. Ensure code is clean, well-commented, and adheres to project standards (eslint).
Deliverables
    • Source Code: Complete source code for both frontend and backend.
    • Documentation: Readme file with instructions on setup, configuration, and usage.
    • Test Suite: Unit tests covering the core business logic.